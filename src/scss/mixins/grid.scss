// Grid system
//
// Generate semantic grid columns with these mixins.
// Container widths
//
// Set the container width, and override it for fixed navbars in media queries.
@mixin grid-init-container() {
    max-width: 100%;
    margin-right: auto;
    margin-left: auto;
    padding-left: floor(($grid-gutter-width / 2));
    padding-right: ceil(($grid-gutter-width / 2));
}

// Row
//
// Rows contain and clear the floats of your columns.
@mixin grid-init-row() {
    // width: 100%;
    // height: auto;
    // display: flex;
    flex-wrap: wrap;
    // overflow: hidden;
    &::after,
    &::before {
        display: table;
        content: ""
    }
    &::after {
        clear: both
    }
}

@mixin grid-init-columns() {
    $piece: "";
    @for $index from 1 through $grid-columns {
        @if $piece !="" {
            $piece: "#{$piece},";
        }
        $piece: "#{$piece} .col-#{$index}, .xs-col-#{$index}, .sm-col-#{$index}, .md-col-#{$index}, .lg-col-#{$index}, .xl-col-#{$index}";
    }
    // terminal
    #{$piece} {
        position: relative;
        // Prevent columns from collapsing when empty
        min-height: 1px;
        // Inner gutter via padding
        padding-left: ceil(($grid-gutter-width / 2));
        padding-right: floor(($grid-gutter-width / 2));
        flex-basis: 0;
        flex-grow: 1;
    }
}

@mixin responsive($breakpoint) {
    @media only screen and (min-width: $breakpoint) {
        @content;
    }
}

@mixin grid-calc-columns($prefix) {
    .#{$prefix}col-auto {
        flex: 0 0 auto;
        width: auto;
        max-width: 100%;
    }
    .#{$prefix}col-push-auto {
        left: auto;
    }
    .#{$prefix}col-pull-auto {
        right: auto;
    }
    .#{$prefix}col-order-first {
        order: -1;
    }
    .#{$prefix}col-order-last {
        order: $grid-columns+1;
    }
    @for $index from 0 through $grid-columns {
        $width: percentage($index / $grid-columns);
        // width
        .#{$prefix}col-#{$index} {
            flex: 0 0 $width;
            width: $width;
            max-width: $width;
        }
        // push
        .#{$prefix}col-push-#{$index} {
            left: $width;
        }
        // pull
        .#{$prefix}col-pull-#{$index} {
            right: $width;
        }
        // order
        .#{$prefix}col-order-#{$index} {
            order: $index;
        }
        // offset
        .#{$prefix}col-offset-#{$index} {
            margin-left: $width;
        }
    }
}

// Create grid for specific class
@mixin grid-make-columns() {
    @include grid-init-columns();
    @each $key,
    $bp in $breakpoints {
        $prefix:#{$key}-;
        @if $key=="primary" {
            $prefix: "";
        }
        @include responsive($bp) {
            @include grid-calc-columns($prefix);
        }
    }
}